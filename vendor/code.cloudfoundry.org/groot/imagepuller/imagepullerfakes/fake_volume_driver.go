// Code generated by counterfeiter. DO NOT EDIT.
package imagepullerfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/groot/imagepuller"
	"code.cloudfoundry.org/lager"
)

type FakeVolumeDriver struct {
	UnpackStub        func(logger lager.Logger, layerID string, parentID []string, layerTar io.Reader) error
	unpackMutex       sync.RWMutex
	unpackArgsForCall []struct {
		logger   lager.Logger
		layerID  string
		parentID []string
		layerTar io.Reader
	}
	unpackReturns struct {
		result1 error
	}
	unpackReturnsOnCall map[int]struct {
		result1 error
	}
	ExistsStub        func(logger lager.Logger, layerID string) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		logger  lager.Logger
		layerID string
	}
	existsReturns struct {
		result1 bool
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeDriver) Unpack(logger lager.Logger, layerID string, parentID []string, layerTar io.Reader) error {
	var parentIDCopy []string
	if parentID != nil {
		parentIDCopy = make([]string, len(parentID))
		copy(parentIDCopy, parentID)
	}
	fake.unpackMutex.Lock()
	ret, specificReturn := fake.unpackReturnsOnCall[len(fake.unpackArgsForCall)]
	fake.unpackArgsForCall = append(fake.unpackArgsForCall, struct {
		logger   lager.Logger
		layerID  string
		parentID []string
		layerTar io.Reader
	}{logger, layerID, parentIDCopy, layerTar})
	fake.recordInvocation("Unpack", []interface{}{logger, layerID, parentIDCopy, layerTar})
	fake.unpackMutex.Unlock()
	if fake.UnpackStub != nil {
		return fake.UnpackStub(logger, layerID, parentID, layerTar)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unpackReturns.result1
}

func (fake *FakeVolumeDriver) UnpackCallCount() int {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	return len(fake.unpackArgsForCall)
}

func (fake *FakeVolumeDriver) UnpackArgsForCall(i int) (lager.Logger, string, []string, io.Reader) {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	return fake.unpackArgsForCall[i].logger, fake.unpackArgsForCall[i].layerID, fake.unpackArgsForCall[i].parentID, fake.unpackArgsForCall[i].layerTar
}

func (fake *FakeVolumeDriver) UnpackReturns(result1 error) {
	fake.UnpackStub = nil
	fake.unpackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeDriver) UnpackReturnsOnCall(i int, result1 error) {
	fake.UnpackStub = nil
	if fake.unpackReturnsOnCall == nil {
		fake.unpackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unpackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeDriver) Exists(logger lager.Logger, layerID string) bool {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		logger  lager.Logger
		layerID string
	}{logger, layerID})
	fake.recordInvocation("Exists", []interface{}{logger, layerID})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(logger, layerID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.existsReturns.result1
}

func (fake *FakeVolumeDriver) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeVolumeDriver) ExistsArgsForCall(i int) (lager.Logger, string) {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return fake.existsArgsForCall[i].logger, fake.existsArgsForCall[i].layerID
}

func (fake *FakeVolumeDriver) ExistsReturns(result1 bool) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVolumeDriver) ExistsReturnsOnCall(i int, result1 bool) {
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVolumeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ imagepuller.VolumeDriver = new(FakeVolumeDriver)
