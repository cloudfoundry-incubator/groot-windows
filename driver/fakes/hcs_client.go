// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/groot-windows/driver"
	"code.cloudfoundry.org/groot-windows/hcs"
	"github.com/Microsoft/hcsshim"
)

type HCSClient struct {
	NewLayerWriterStub        func(info hcsshim.DriverInfo, layerID string, parentLayerPaths []string) (hcs.LayerWriter, error)
	newLayerWriterMutex       sync.RWMutex
	newLayerWriterArgsForCall []struct {
		info             hcsshim.DriverInfo
		layerID          string
		parentLayerPaths []string
	}
	newLayerWriterReturns struct {
		result1 hcs.LayerWriter
		result2 error
	}
	newLayerWriterReturnsOnCall map[int]struct {
		result1 hcs.LayerWriter
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HCSClient) NewLayerWriter(info hcsshim.DriverInfo, layerID string, parentLayerPaths []string) (hcs.LayerWriter, error) {
	var parentLayerPathsCopy []string
	if parentLayerPaths != nil {
		parentLayerPathsCopy = make([]string, len(parentLayerPaths))
		copy(parentLayerPathsCopy, parentLayerPaths)
	}
	fake.newLayerWriterMutex.Lock()
	ret, specificReturn := fake.newLayerWriterReturnsOnCall[len(fake.newLayerWriterArgsForCall)]
	fake.newLayerWriterArgsForCall = append(fake.newLayerWriterArgsForCall, struct {
		info             hcsshim.DriverInfo
		layerID          string
		parentLayerPaths []string
	}{info, layerID, parentLayerPathsCopy})
	fake.recordInvocation("NewLayerWriter", []interface{}{info, layerID, parentLayerPathsCopy})
	fake.newLayerWriterMutex.Unlock()
	if fake.NewLayerWriterStub != nil {
		return fake.NewLayerWriterStub(info, layerID, parentLayerPaths)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.newLayerWriterReturns.result1, fake.newLayerWriterReturns.result2
}

func (fake *HCSClient) NewLayerWriterCallCount() int {
	fake.newLayerWriterMutex.RLock()
	defer fake.newLayerWriterMutex.RUnlock()
	return len(fake.newLayerWriterArgsForCall)
}

func (fake *HCSClient) NewLayerWriterArgsForCall(i int) (hcsshim.DriverInfo, string, []string) {
	fake.newLayerWriterMutex.RLock()
	defer fake.newLayerWriterMutex.RUnlock()
	return fake.newLayerWriterArgsForCall[i].info, fake.newLayerWriterArgsForCall[i].layerID, fake.newLayerWriterArgsForCall[i].parentLayerPaths
}

func (fake *HCSClient) NewLayerWriterReturns(result1 hcs.LayerWriter, result2 error) {
	fake.NewLayerWriterStub = nil
	fake.newLayerWriterReturns = struct {
		result1 hcs.LayerWriter
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) NewLayerWriterReturnsOnCall(i int, result1 hcs.LayerWriter, result2 error) {
	fake.NewLayerWriterStub = nil
	if fake.newLayerWriterReturnsOnCall == nil {
		fake.newLayerWriterReturnsOnCall = make(map[int]struct {
			result1 hcs.LayerWriter
			result2 error
		})
	}
	fake.newLayerWriterReturnsOnCall[i] = struct {
		result1 hcs.LayerWriter
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newLayerWriterMutex.RLock()
	defer fake.newLayerWriterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HCSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.HCSClient = new(HCSClient)
