// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/groot-windows/driver"
)

type Limiter struct {
	SetLimitStub        func(string, uint64) error
	setLimitMutex       sync.RWMutex
	setLimitArgsForCall []struct {
		arg1 string
		arg2 uint64
	}
	setLimitReturns struct {
		result1 error
	}
	setLimitReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Limiter) SetLimit(arg1 string, arg2 uint64) error {
	fake.setLimitMutex.Lock()
	ret, specificReturn := fake.setLimitReturnsOnCall[len(fake.setLimitArgsForCall)]
	fake.setLimitArgsForCall = append(fake.setLimitArgsForCall, struct {
		arg1 string
		arg2 uint64
	}{arg1, arg2})
	fake.recordInvocation("SetLimit", []interface{}{arg1, arg2})
	fake.setLimitMutex.Unlock()
	if fake.SetLimitStub != nil {
		return fake.SetLimitStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setLimitReturns.result1
}

func (fake *Limiter) SetLimitCallCount() int {
	fake.setLimitMutex.RLock()
	defer fake.setLimitMutex.RUnlock()
	return len(fake.setLimitArgsForCall)
}

func (fake *Limiter) SetLimitArgsForCall(i int) (string, uint64) {
	fake.setLimitMutex.RLock()
	defer fake.setLimitMutex.RUnlock()
	return fake.setLimitArgsForCall[i].arg1, fake.setLimitArgsForCall[i].arg2
}

func (fake *Limiter) SetLimitReturns(result1 error) {
	fake.SetLimitStub = nil
	fake.setLimitReturns = struct {
		result1 error
	}{result1}
}

func (fake *Limiter) SetLimitReturnsOnCall(i int, result1 error) {
	fake.SetLimitStub = nil
	if fake.setLimitReturnsOnCall == nil {
		fake.setLimitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setLimitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Limiter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setLimitMutex.RLock()
	defer fake.setLimitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Limiter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Limiter = new(Limiter)
